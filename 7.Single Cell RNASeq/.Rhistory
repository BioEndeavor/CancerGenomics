View(mat)
rownames(mat) =  make.names(mat[,6],unique = T)
View(mat)
mat2 = mat[,-1]
View(mat2)
mat2 = mat[,-1,-6]
View(mat2)
mat2 = mat2[,-6]
View(mat2)
mat2 = mat2[,-5]
library(RCircos)
library(tidyr)
library(org.Hs.eg.db)
library(AnnotationDbi)
data("UCSC.HG38.Human.CytoBandIdeogram")
cyto.info = UCSC.HG38.Human.CytoBandIdeogram
RCircos.Set.Core.Components(cyto.info,
chr.exclude=NULL,
tracks.inside=10,
tracks.outside=0)
RCircos.Set.Plot.Area()
RCircos.Chromosome.Ideogram.Plot()
cyto.info = UCSC.HG38.Human.CytoBandIdeogram
cyto.info$Name = NA
cyto.info$Stain = NA
RCircos.Set.Core.Components(cyto.info,
chr.exclude=NULL,
tracks.inside=10,
tracks.outside=0)
chr_order = unique(cyto.info$Chromosome)
RCircos.Set.Plot.Area()
ideo = RCircos.Get.Plot.Ideogram()
ideo$BandColor = 'salmon'
num = which(ideo$Chromosome == 'chrX')
ideo[num, 'BandColor'] = 'chartreuse'
num = which(ideo$Chromosome == 'chrY')
ideo[num, 'BandColor'] = 'purple'
RCircos.Reset.Plot.Ideogram(ideo)
RCircos.Set.Plot.Area()
RCircos.Chromosome.Ideogram.Plot()
library(biomaRt)
mat = read.csv("C:/Users/joash/OneDrive/Desktop/Anna/New.csv")
ensl=mat[,1]
mat$gene<-mapIds(org.Hs.eg.db,keys=ensl,keytype = "ENSEMBL",column = "SYMBOL")
mat = mat %>% drop_na()
rownames(mat) =  make.names(mat[,6],unique = T)
mat2 = mat[,-1]
mat2 = mat2[,-5]
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
coords = getBM(attributes=c('chromosome_name', 'start_position',
'end_position', 'hgnc_symbol'),
filters = c('hgnc_symbol'),
values = list(rownames(mat2)),
mart = mart)
write.csv(coords, file = 'coords.csv')
coords$chromosome_name = paste0('chr', coords$chromosome_name)
coords$chromosome_name = factor(coords$chromosome_name,levels = chr_order)
View(coords)
num = which(is.na(coords$chromosome_name))
coords = coords[-num, ]
up = which((mat2$Pvalue < 0.01) &
(mat2$Log2FC > 1))
upmat = mat2[up, ]
num = which(coords$hgnc_symbol %in% rownames(upmat))
coords1 = coords[num, ]
RCircos.Gene.Name.Plot(coords1, name.col=4, track.num = 2, side = "in",
is.sorted = F)
genes = intersect(rownames(mat2), coords$hgnc_symbol)
mat1 = mat2[genes, ]
df = cbind.data.frame(rownames(mat1), mat1[, c(1,2,4)])
colnames(df)[1] = 'hgnc_symbol'
data = merge(coords, df, by = 'hgnc_symbol',all.x = T)
data = data %>% drop_na()
colnames(data)
data = data[,c(2,3,4,1,5,6,7)]
data = data[, c('chromosome_name', 'start_position',
'end_position','hgnc_symbol','meanTumor', 'meanControl', 'Log2FC')]
RCircos.Heatmap.Plot(data, data.col = 7, track.num = 6, side = "in",
min.value = -2, max.value =2, genomic.columns = 3,
is.sorted = F)
RC.param = RCircos.Get.Plot.Parameters()
RC.param['heatmap.color'] = "GreenWhiteRed"
RCircos.Reset.Plot.Parameters(RC.param)
RCircos.Heatmap.Plot(data, data.col = 7, track.num = 10, side = "in",
min.value = -2, max.value = 2,
is.sorted = F)
library(matrixStats)
library(circlize)
library(ComplexHeatmap)
library(data.table)
ssgsea = function(X, gene_sets, alpha = 0.25, scale = T, norm = F, single = T) {
row_names = rownames(X)
num_genes = nrow(X)
gene_sets = lapply(gene_sets, function(genes) {which(row_names %in% genes)})
# Ranks for genes
R = matrixStats::colRanks(X, preserveShape = T, ties.method = 'average')
# Calculate enrichment score (es) for each sample (column)
es = apply(R, 2, function(R_col) {
gene_ranks = order(R_col, decreasing = TRUE)
# Calc es for each gene set
es_sample = sapply(gene_sets, function(gene_set_idx) {
# pos: match (within the gene set)
# neg: non-match (outside the gene set)
indicator_pos = gene_ranks %in% gene_set_idx
indicator_neg = !indicator_pos
rank_alpha  = (R_col[gene_ranks] * indicator_pos) ^ alpha
step_cdf_pos = cumsum(rank_alpha)    / sum(rank_alpha)
step_cdf_neg = cumsum(indicator_neg) / sum(indicator_neg)
step_cdf_diff = step_cdf_pos - step_cdf_neg
# Normalize by gene number
if (scale) step_cdf_diff = step_cdf_diff / num_genes
# Use ssGSEA or not
if (single) {
sum(step_cdf_diff)
} else {
step_cdf_diff[which.max(abs(step_cdf_diff))]
}
})
unlist(es_sample)
})
if (length(gene_sets) == 1) es = matrix(es, nrow = 1)
# Normalize by absolute diff between max and min
if (norm) es = es / diff(range(es))
# Prepare output
rownames(es) = names(gene_sets)
colnames(es) = colnames(X)
return(es)
}
data = readRDS("C:/Users/joash/OneDrive/Desktop/Anna/Lg.Rds")
rownames(data) = data[,1]
data = data[,-1]
data = as.matrix(data)
gene_set = read.csv("C:/Users/joash/OneDrive/Desktop/Anna/markers2Sep.csv")
head(gene_set)
gene_sets = as.list(as.data.frame(gene_set))
print("genes set ready")
res = ssgsea(data, gene_sets, scale = TRUE, norm = FALSE)
res1 = t(res)
head(res1)
mat = as.matrix(res1)
for(i in 1:nrow(mat))
{
vec = as.numeric(c(mat[i,]))
mat[i,1:ncol(mat)] = (vec-mean(vec))/sd(vec)
}
View(mat)
#order both the objects for sample alignment. If the number of samples vary in your data, please subset the data frames and then order them.
Heatmap(t(mat),col = colorRamp2(c(-2,0,2),c("orangered", "white", "purple")))
View(res1)
View(data)
data = readRDS("C:/Users/joash/OneDrive/Desktop/Anna/Lg.Rds")
rownames(data) = data[,1]
data = readRDS("C:/Users/joash/OneDrive/Desktop/Anna/Lg.Rds")
ensl=data[,1]
data$gene<-mapIds(org.Hs.eg.db,keys=ensl,keytype = "ENSEMBL",column = "SYMBOL")
data = data %>% drop_na()
View(data)
data = data[,-1]
rownames(data) = data[,10]
rownames(data) = make.names(data[,10],unique = T)
View(data)
data = data[,-10]
data = as.matrix(data)
gene_set = read.csv("C:/Users/joash/OneDrive/Desktop/Anna/markers2Sep.csv")
head(gene_set)
gene_sets = as.list(as.data.frame(gene_set))
print("genes set ready")
res = ssgsea(data, gene_sets, scale = TRUE, norm = FALSE)
View(res)
res1 = t(res)
head(res1)
mat = as.matrix(res1)
for(i in 1:nrow(mat))
{
vec = as.numeric(c(mat[i,]))
mat[i,1:ncol(mat)] = (vec-mean(vec))/sd(vec)
}
View(mat)
Heatmap(t(mat),col = colorRamp2(c(-2,0,2),c("orangered", "white", "purple")))
Heatmap(t(mat[1:10]),col = colorRamp2(c(-2,0,2),c("orangered", "white", "purple")))
Heatmap(t(mat[,1:10]),col = colorRamp2(c(-2,0,2),c("orangered", "white", "purple")))
#Import libraries
library(RCircos)
library(tidyr)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(biomaRt)
#Import reference dataset
data("UCSC.HG38.Human.CytoBandIdeogram")
cyto.info = UCSC.HG38.Human.CytoBandIdeogram
RCircos.Set.Core.Components(cyto.info,
chr.exclude=NULL,
tracks.inside=10,
tracks.outside=0)
RCircos.Set.Plot.Area()
RCircos.Chromosome.Ideogram.Plot()
cyto.info = UCSC.HG38.Human.CytoBandIdeogram
cyto.info$Name = NA
cyto.info$Stain = NA
RCircos.Set.Core.Components(cyto.info,
chr.exclude=NULL,
tracks.inside=10,
tracks.outside=0)
chr_order = unique(cyto.info$Chromosome)
RCircos.Set.Plot.Area()
ideo = RCircos.Get.Plot.Ideogram()
ideo$BandColor = 'Yellow'
num = which(ideo$Chromosome == 'chrX')
ideo[num, 'BandColor'] = 'chartreuse'
num = which(ideo$Chromosome == 'chrY')
ideo[num, 'BandColor'] = 'Red'
RCircos.Reset.Plot.Ideogram(ideo)
RCircos.Set.Plot.Area()
RCircos.Chromosome.Ideogram.Plot()
#Import the Logcpm file
mat = read.csv("C:/Users/joash/OneDrive/Desktop/Anna/New.csv")
#Convert ensemblid to gene symbols
ensl=mat[,1]
mat$gene<-mapIds(org.Hs.eg.db,keys=ensl,keytype = "ENSEMBL",column = "SYMBOL")
mat = mat %>% drop_na()
rownames(mat) =  make.names(mat[,6],unique = T)
mat2 = mat[,-1]
mat2 = mat2[,-5]
#Run mart
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
coords = getBM(attributes=c('chromosome_name', 'start_position',
'end_position', 'hgnc_symbol'),
filters = c('hgnc_symbol'),
values = list(rownames(mat2)),
mart = mart)
write.csv(coords, file = 'coords.csv')
coords$chromosome_name = paste0('chr', coords$chromosome_name)
coords$chromosome_name = factor(coords$chromosome_name,levels = chr_order)
num = which(is.na(coords$chromosome_name))
coords = coords[-num, ]
#Show selected values in up
up = which((mat2$Pvalue < 0.01) &
(mat2$Log2FC > 1))
#Create a dataset of selected values in "up" variables
upmat = mat2[up, ]
#Select gene symbols common in coords and upmat
num = which(coords$hgnc_symbol %in% rownames(upmat))
#Create another dataset that has the common symbols only
coords1 = coords[num, ]
#Plot RCircos plot
RCircos.Gene.Name.Plot(coords1, name.col=4, track.num = 2, side = "in",
is.sorted = F)
#Common genes from coords and our dataset
genes = intersect(rownames(mat2), coords$hgnc_symbol)
mat1 = mat2[genes, ]
#Append selected columns from mat1
df = cbind.data.frame(rownames(mat1), mat1[, c(1,2,4)])
#Change the name of the column
colnames(df)[1] = 'hgnc_symbol'
#Merge coords and df
data = merge(coords, df, by = 'hgnc_symbol',all.x = T)
#Drop na values
data = data %>% drop_na()
#Rearrange data columns
colnames(data)
data = data[,c(2,3,4,1,5,6,7)]
data = data[, c('chromosome_name', 'start_position',
'end_position','hgnc_symbol','meanTumor', 'meanControl', 'Log2FC')]
#Plot Circos Heatmap
RCircos.Heatmap.Plot(data, data.col = 7, track.num = 6, side = "in",
min.value = -2, max.value =2, genomic.columns = 3,
is.sorted = F)
RC.param = RCircos.Get.Plot.Parameters()
RC.param['heatmap.color'] = "BlueWhiteRed"
RCircos.Reset.Plot.Parameters(RC.param)
RCircos.Heatmap.Plot(data, data.col = 7, track.num = 10, side = "in",
min.value = -2, max.value = 2,
is.sorted = F)
gc()
#Import libraries
library(RCircos)
library(tidyr)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(biomaRt)
#Import reference dataset
data("UCSC.HG38.Human.CytoBandIdeogram")
cyto.info = UCSC.HG38.Human.CytoBandIdeogram
RCircos.Set.Core.Components(cyto.info,
chr.exclude=NULL,
tracks.inside=10,
tracks.outside=0)
RCircos.Set.Plot.Area()
RCircos.Chromosome.Ideogram.Plot()
cyto.info = UCSC.HG38.Human.CytoBandIdeogram
cyto.info$Name = NA
cyto.info$Stain = NA
RCircos.Set.Core.Components(cyto.info,
chr.exclude=NULL,
tracks.inside=10,
tracks.outside=0)
chr_order = unique(cyto.info$Chromosome)
RCircos.Set.Plot.Area()
ideo = RCircos.Get.Plot.Ideogram()
ideo$BandColor = 'Yellow'
num = which(ideo$Chromosome == 'chrX')
ideo[num, 'BandColor'] = 'chartreuse'
num = which(ideo$Chromosome == 'chrY')
ideo[num, 'BandColor'] = 'Red'
RCircos.Reset.Plot.Ideogram(ideo)
RCircos.Set.Plot.Area()
RCircos.Chromosome.Ideogram.Plot()
#Import the Logcpm file
mat = read.csv("C:/Users/joash/OneDrive/Desktop/Anna/New.csv")
#Convert ensemblid to gene symbols
ensl=mat[,1]
mat$gene<-mapIds(org.Hs.eg.db,keys=ensl,keytype = "ENSEMBL",column = "SYMBOL")
mat = mat %>% drop_na()
rownames(mat) =  make.names(mat[,6],unique = T)
mat2 = mat[,-1]
mat2 = mat2[,-5]
#Run mart
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
coords = getBM(attributes=c('chromosome_name', 'start_position',
'end_position', 'hgnc_symbol'),
filters = c('hgnc_symbol'),
values = list(rownames(mat2)),
mart = mart)
#Import libraries
library(RCircos)
library(tidyr)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(biomaRt)
#Import reference dataset
data("UCSC.HG38.Human.CytoBandIdeogram")
cyto.info = UCSC.HG38.Human.CytoBandIdeogram
RCircos.Set.Core.Components(cyto.info,
chr.exclude=NULL,
tracks.inside=10,
tracks.outside=0)
RCircos.Set.Plot.Area()
RCircos.Chromosome.Ideogram.Plot()
cyto.info = UCSC.HG38.Human.CytoBandIdeogram
cyto.info$Name = NA
cyto.info$Stain = NA
RCircos.Set.Core.Components(cyto.info,
chr.exclude=NULL,
tracks.inside=10,
tracks.outside=0)
chr_order = unique(cyto.info$Chromosome)
RCircos.Set.Plot.Area()
ideo = RCircos.Get.Plot.Ideogram()
ideo$BandColor = 'Yellow'
num = which(ideo$Chromosome == 'chrX')
ideo[num, 'BandColor'] = 'chartreuse'
num = which(ideo$Chromosome == 'chrY')
ideo[num, 'BandColor'] = 'Red'
RCircos.Reset.Plot.Ideogram(ideo)
RCircos.Set.Plot.Area()
RCircos.Chromosome.Ideogram.Plot()
#Import the Logcpm file
mat = read.csv("C:/Users/joash/OneDrive/Desktop/Anna/New.csv")
#Convert ensemblid to gene symbols
ensl=mat[,1]
mat$gene<-mapIds(org.Hs.eg.db,keys=ensl,keytype = "ENSEMBL",column = "SYMBOL")
mat = mat %>% drop_na()
rownames(mat) =  make.names(mat[,6],unique = T)
mat2 = mat[,-1]
mat2 = mat2[,-5]
#Run mart
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
coords = getBM(attributes=c('chromosome_name', 'start_position',
'end_position', 'hgnc_symbol'),
filters = c('hgnc_symbol'),
values = list(rownames(mat2)),
mart = mart)
write.csv(coords, file = 'coords.csv')
coords$chromosome_name = paste0('chr', coords$chromosome_name)
coords$chromosome_name = factor(coords$chromosome_name,levels = chr_order)
num = which(is.na(coords$chromosome_name))
coords = coords[-num, ]
#Show selected values in up
up = which((mat2$Pvalue < 0.01) &
(mat2$Log2FC > 1))
#Create a dataset of selected values in "up" variables
upmat = mat2[up, ]
#Select gene symbols common in coords and upmat
num = which(coords$hgnc_symbol %in% rownames(upmat))
#Create another dataset that has the common symbols only
coords1 = coords[num, ]
#Plot RCircos plot
RCircos.Gene.Name.Plot(coords1, name.col=4, track.num = 2, side = "in",
is.sorted = F)
#Common genes from coords and our dataset
genes = intersect(rownames(mat2), coords$hgnc_symbol)
mat1 = mat2[genes, ]
#Append selected columns from mat1
df = cbind.data.frame(rownames(mat1), mat1[, c(1,2,4)])
#Change the name of the column
colnames(df)[1] = 'hgnc_symbol'
#Merge coords and df
data = merge(coords, df, by = 'hgnc_symbol',all.x = T)
#Drop na values
data = data %>% drop_na()
#Rearrange data columns
colnames(data)
data = data[,c(2,3,4,1,5,6,7)]
data = data[, c('chromosome_name', 'start_position',
'end_position','hgnc_symbol','meanTumor', 'meanControl', 'Log2FC')]
#Plot Circos Heatmap
RCircos.Heatmap.Plot(data, data.col = 7, track.num = 6, side = "in",
min.value = -2, max.value =2, genomic.columns = 3,
is.sorted = F)
RC.param = RCircos.Get.Plot.Parameters()
RC.param['heatmap.color'] = "BlueWhiteRed"
RCircos.Reset.Plot.Parameters(RC.param)
RCircos.Heatmap.Plot(data, data.col = 7, track.num = 10, side = "in",
min.value = -2, max.value = 2,
is.sorted = F)
gc()
#Import libraries
library(RCircos)
library(tidyr)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(biomaRt)
#Import reference dataset
data("UCSC.HG38.Human.CytoBandIdeogram")
cyto.info = UCSC.HG38.Human.CytoBandIdeogram
RCircos.Set.Core.Components(cyto.info,
chr.exclude=NULL,
tracks.inside=10,
tracks.outside=0)
RCircos.Set.Plot.Area()
RCircos.Chromosome.Ideogram.Plot()
cyto.info = UCSC.HG38.Human.CytoBandIdeogram
cyto.info$Name = NA
cyto.info$Stain = NA
RCircos.Set.Core.Components(cyto.info,
chr.exclude=NULL,
tracks.inside=10,
tracks.outside=0)
chr_order = unique(cyto.info$Chromosome)
RCircos.Set.Plot.Area()
ideo = RCircos.Get.Plot.Ideogram()
ideo$BandColor = 'Yellow'
num = which(ideo$Chromosome == 'chrX')
ideo[num, 'BandColor'] = 'chartreuse'
num = which(ideo$Chromosome == 'chrY')
ideo[num, 'BandColor'] = 'Red'
RCircos.Reset.Plot.Ideogram(ideo)
RCircos.Set.Plot.Area()
RCircos.Chromosome.Ideogram.Plot()
#Import the Logcpm file
mat = read.csv("C:/Users/joash/OneDrive/Desktop/Anna/New.csv")
#Convert ensemblid to gene symbols
ensl=mat[,1]
mat$gene<-mapIds(org.Hs.eg.db,keys=ensl,keytype = "ENSEMBL",column = "SYMBOL")
mat = mat %>% drop_na()
rownames(mat) =  make.names(mat[,6],unique = T)
mat2 = mat[,-1]
mat2 = mat2[,-5]
#Run mart
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
coords = getBM(attributes=c('chromosome_name', 'start_position',
'end_position', 'hgnc_symbol'),
filters = c('hgnc_symbol'),
values = list(rownames(mat2)),
mart = mart)
#Import Libraries
library(Seurat)
library(tidyr)
library(dplyr)
#Read the dataset that includes barcodes,features and matrix file
pbmc.data = Read10X(data.dir = "C:/Users/joash/OneDrive/Desktop/pbmc/leukemia/")
#Create Seurat Object
pbmc = CreateSeuratObject(counts = pbmc.data,min.cells = 3,min.features = 200)
pbmc
pbmc[["percent.mt"]] = PercentageFeatureSet(pbmc, pattern = "^MT-")
head(pbmc@meta.data)
pdf('Violin.pdf')
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
dev.off()
setwd("C:\Users\joash\OneDrive\Documents\Cancer Genomics\7.Single Cell RNASeq")
setwd("C:/Users/joash/OneDrive/Documents/Cancer Genomics/7.Single Cell RNASeq")
pdf('Feature.pdf')
plot1 = FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 = FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
dev.off()
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc
seu <- FindVariableFeatures(object = pbmc)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = seu))
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
pdf('DimPlot.pdf')
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
#DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
dev.off()
pbmc = FindNeighbors(pbmc, dims = 1:10)
pbmc = FindClusters(pbmc, resolution = 0.5)
pbmc = RunUMAP(pbmc, dims = 1:10)
pdf('Umap.pdf')
DimPlot(pbmc, reduction = "umap")
DimPlot(pbmc, reduction = "umap", label = T)
dev.off()
pbmc.markers = FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
a = pbmc.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_log2FC)
genes = a %>% pull(gene)
pdf('FeaturePlot.pdf')
FeaturePlot(pbmc, features = genes[1:2])
FeaturePlot(pbmc, features = genes[1:2], cols = c("white", "red"))
dev.off()
